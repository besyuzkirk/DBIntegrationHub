# GitHub Actions CI/CD Pipeline
# Docker image build ve test

name: Docker Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}-api
  IMAGE_NAME_UI: ${{ github.repository }}-ui

jobs:
  # .NET API Build & Test
  build-api:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        working-directory: ./DBIntegrationHub.API
        run: dotnet restore

      - name: Build
        working-directory: ./DBIntegrationHub.API
        run: dotnet build --no-restore --configuration Release

      # - name: Test
      #   working-directory: ./DBIntegrationHub.API
      #   run: dotnet test --no-build --configuration Release --verbosity normal

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./DBIntegrationHub.API
          file: ./devops/Dockerfile.api
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Next.js UI Build & Test
  build-ui:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./sql-integration-hub-ui/package-lock.json

      - name: Install dependencies
        working-directory: ./sql-integration-hub-ui
        run: npm ci --legacy-peer-deps

      - name: Lint
        working-directory: ./sql-integration-hub-ui
        run: npm run lint

      - name: Build
        working-directory: ./sql-integration-hub-ui
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5149/api

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_UI }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./sql-integration-hub-ui
          file: ./devops/Dockerfile.ui
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NEXT_PUBLIC_API_URL=http://localhost:5149/api

  # Docker Compose Test
  integration-test:
    runs-on: ubuntu-latest
    needs: [build-api, build-ui]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start services
        working-directory: ./devops
        run: docker-compose up -d

      - name: Wait for services
        run: |
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Health check
        run: |
          curl -f http://localhost:5149/health || exit 1
          curl -f http://localhost:3000 || exit 1

      - name: Show logs on failure
        if: failure()
        working-directory: ./devops
        run: docker-compose logs

      - name: Cleanup
        if: always()
        working-directory: ./devops
        run: docker-compose down -v

